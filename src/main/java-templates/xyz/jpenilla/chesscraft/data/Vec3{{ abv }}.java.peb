/*
 * chesscraft
 *
 * Copyright (c) 2023 Jason Penilla
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package xyz.jpenilla.chesscraft.data;

import io.leangen.geantyref.TypeToken;
import java.lang.reflect.Type;
import java.util.function.Predicate;
import org.bukkit.Location;
import org.bukkit.World;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.framework.qual.DefaultQualifier;
import org.spongepowered.configurate.serialize.ScalarSerializer;
import org.spongepowered.configurate.serialize.SerializationException;

@DefaultQualifier(NonNull.class)
public record Vec3{{ abv }}({{ variant }} x, {{ variant }} y, {{ variant }} z) {
  public static final ScalarSerializer<Vec3{{ abv }}> SERIALIZER = new Serializer();
  public static final Vec3{{ abv }} ZERO = new Vec3{{ abv }}(0, 0, 0);

  public Location toLocation(final World world) {
    return new Location(world, this.x, this.y, this.z);
  }

  public static Vec3{{ abv }} fromBlockLocation(final Location loc) {
    return new Vec3{{ abv }}(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ());
  }

  public Vec3{{ abv }} add(final {{ variant }} x, final {{ variant }} y, final {{ variant }} z, final {{ variant }} scale) {
    return new Vec3{{ abv }}(this.x + x * scale, this.y + y * scale, this.z + z * scale);
  }

  public Vec3{{ abv }} add(final {{ variant }} x, final {{ variant }} y, final {{ variant }} z) {
    return new Vec3{{ abv }}(this.x + x, this.y + y, this.z + z);
  }

  public Vec3{{ abv }} add(final Vec3{{ abv }} vec, final {{ variant }} scale) {
    return new Vec3{{ abv }}(this.x + vec.x * scale, this.y + vec.y * scale, this.z + vec.z * scale);
  }

  public Vec3{{ abv }} add(final Vec3{{ abv }} vec) {
    return new Vec3{{ abv }}(this.x + vec.x, this.y + vec.y, this.z + vec.z);
  }

  public Vec3{{ abv }} mult(final {{ variant }} xFactor, final {{ variant }} yFactor, final {{ variant }} zFactor) {
    return new Vec3{{ abv }}(this.x * xFactor, this.y * yFactor, this.z * zFactor);
  }

  public Vec3d asVec3d() {
    return new Vec3d(this.x, this.y, this.z);
  }

  private static final class Serializer extends ScalarSerializer<Vec3{{ abv }}> {
    private Serializer() {
      super(TypeToken.get(Vec3{{ abv }}.class));
    }

    @Override
    public Vec3{{ abv }} deserialize(final Type type, final Object obj) throws SerializationException {
      final String[] split = obj.toString().split(" ");
      final {{ variant }} x = tryParse(split[0]);
      final {{ variant }} y = tryParse(split[1]);
      final {{ variant }} z = tryParse(split[2]);
      return new Vec3{{ abv }}(x, y, z);
    }

    private static {{ variant }} tryParse(final String s) throws SerializationException {
      try {
        return {{ parse }}(s);
      } catch (final NumberFormatException ex) {
        throw new SerializationException(ex);
      }
    }

    @Override
    protected Object serialize(final Vec3{{ abv }} item, final Predicate<Class<?>> typeSupported) {
      return item.x() + " " + item.y() + " " + item.z();
    }
  }
}
